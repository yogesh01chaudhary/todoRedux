{"version":3,"sources":["helpers/fetch2.js","reducers/authReducer.js","components/Auth.js","reducers/todoReducer.js","components/Todo.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetch2","api","body","a","fetch","method","headers","localStorage","getItem","JSON","stringify","res","json","fetch3","type","signupUser","createAsyncThunk","result","signinUser","authReducer","createSlice","name","initialState","token","loading","error","reducers","addToken","state","action","logout","removeItem","extraReducers","fulfilled","payload","message","pending","setItem","actions","Auth","useState","email","setEmail","password","setPassword","dispatch","useDispatch","auth","setAuth","useSelector","user","className","value","onChange","e","target","onClick","createTodo","fetchTodo","deleteTodo","id","todoReducer","push","filter","item","_id","Todo","mytodo","setTodo","todos","useEffect","placeholder","todo","map","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dee0d8ba.chunk.js","sourcesContent":["export const fetch2 = async (api,body)=>{\r\n    const res =  await fetch(api,{\r\n         method:\"post\",\r\n         headers:{\r\n             \"Content-Type\":\"application/json\",\r\n             \"Authorization\":localStorage.getItem('token')\r\n         },\r\n         body:JSON.stringify(body)\r\n     })\r\n     return await res.json()\r\n }\r\n \r\nexport const fetch3 = async (api,type)=>{\r\n    const res =  await fetch(api,{\r\n         method:type,\r\n         headers:{\r\n             \"Content-Type\":\"application/json\",\r\n             \"Authorization\":localStorage.getItem('token')\r\n         }\r\n     })\r\n     return await res.json()\r\n }\r\n ","import {createSlice,createAsyncThunk} from '@reduxjs/toolkit'\r\nimport {fetch2} from '../helpers/fetch2'\r\nconst initialState = {\r\n    token:\"\",\r\n    loading:false,\r\n    error:\"\"\r\n}\r\n\r\n\r\n\r\nexport const signupUser = createAsyncThunk(\r\n    'signupuser',\r\n    async (body)=>{\r\n       const result =  await fetch2('/signup',body)\r\n       return result  \r\n    }\r\n)\r\n\r\nexport const signinUser = createAsyncThunk(\r\n    'signinuser',\r\n    async (body)=>{\r\n       const result =  await fetch2('/signin',body)\r\n       return result  \r\n    }\r\n)\r\n\r\nconst authReducer = createSlice({\r\n    name:\"user\",\r\n    initialState,\r\n    reducers:{\r\n        addToken:(state,action)=>{\r\n            state.token = localStorage.getItem('token')\r\n        },\r\n        logout:(state,action)=>{\r\n            state.token = null\r\n            localStorage.removeItem('token')\r\n        }\r\n    },\r\n    extraReducers:{\r\n        [signupUser.fulfilled]:(state,{payload:{error,message}})=>{\r\n          state.loading = false\r\n          if(error){\r\n              state.error =error\r\n          }else{\r\n              state.error = message\r\n          }\r\n        },\r\n        [signupUser.pending]:(state,action)=>{\r\n            state.loading = true\r\n        },\r\n        [signinUser.pending]:(state,action)=>{\r\n            state.loading = true\r\n        },\r\n        [signinUser.fulfilled]:(state,{payload:{error,token}})=>{\r\n            state.loading = false\r\n            if(error){\r\n                state.error =error\r\n            }else{\r\n                state.token = token\r\n                localStorage.setItem('token',token)\r\n            }\r\n          },\r\n    }\r\n\r\n})\r\n\r\nexport const {addToken,logout}  = authReducer.actions\r\nexport default authReducer.reducer","import {useState} from 'react'\r\nimport {signupUser,signinUser} from '../reducers/authReducer'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nfunction Auth() {\r\n\r\n    const [email,setEmail] = useState('')\r\n    const [password,setPassword] = useState('')\r\n    const dispatch = useDispatch()\r\n    const [auth,setAuth] = useState('signin')\r\n    const {loading,error} = useSelector(state=>state.user)\r\n    const authenticate = ()=>{\r\n        if(auth=='signin'){\r\n           dispatch(signinUser({email,password}))\r\n        }else{\r\n            dispatch(signupUser({email,password}))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {loading &&\r\n             <div className=\"progress\">\r\n                <div className=\"indeterminate\"></div>\r\n            </div>\r\n               \r\n            }\r\n            <h1>please {auth}!</h1>\r\n            {error && \r\n            <h5>{error}</h5>\r\n            }\r\n            <input \r\n            type=\"email\"\r\n            value={email}\r\n            onChange={(e)=>setEmail(e.target.value)}\r\n            />\r\n            <input \r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e)=>setPassword(e.target.value)}\r\n            />\r\n            {\r\n                auth == \"signin\" ?\r\n                <h6 onClick={()=>setAuth('signup')}>Dont have an account ?</h6>:\r\n                <h6 onClick={()=>setAuth('signin')}>Already have an account?</h6>\r\n            }\r\n            <button className=\"btn #ff4081 pink accent-2\" onClick={()=>authenticate()}>{auth}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","import {createSlice,createAsyncThunk} from '@reduxjs/toolkit'\r\nimport {fetch2,fetch3} from '../helpers/fetch2'\r\nconst initialState = []\r\n\r\nexport const createTodo = createAsyncThunk(\r\n    'createtodo',\r\n    async (body)=>{\r\n       const result =  await fetch2('/createtodo',body)\r\n       return result  \r\n    }\r\n)\r\nexport const fetchTodo = createAsyncThunk(\r\n    'fetchtodos',\r\n    async ()=>{\r\n       const result =  await fetch3('/gettodos',\"get\")\r\n       return result  \r\n    }\r\n)\r\nexport const deleteTodo = createAsyncThunk(\r\n    'deletetodo',\r\n    async (id)=>{\r\n       const result =  await fetch3(`/remove/${id}`,\"delete\")\r\n       return result  \r\n    }\r\n)\r\n\r\nconst todoReducer = createSlice({\r\n    name:\"todo\",\r\n    initialState,\r\n    reducers:{\r\n    },\r\n    extraReducers:{\r\n        [createTodo.fulfilled]:(state,{payload:{message}})=>{\r\n            if(message) state.push(message)\r\n        },\r\n        [fetchTodo.fulfilled]:(state,{payload:{message}})=>{\r\n            return message\r\n        },\r\n        [deleteTodo.fulfilled]:(state,{payload:{message}})=>{\r\n           const removedTodo =  state.filter(item=>{\r\n                return item._id != message._id\r\n            })\r\n            return removedTodo\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport default todoReducer.reducer","import {useState,useEffect} from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\nimport {createTodo,fetchTodo,deleteTodo} from '../reducers/todoReducer'\r\nimport {logout} from '../reducers/authReducer'\r\nexport default function Todo() {\r\n    const [mytodo,setTodo] = useState(\"\")\r\n    const dispatch = useDispatch()\r\n    const todos =  useSelector(state=> state.todos)\r\n    const addTodo = ()=>{\r\n     dispatch(createTodo({todo:mytodo}))\r\n    }\r\n    useEffect(()=>{\r\n     dispatch(fetchTodo())\r\n    },[])\r\n    return (\r\n        <div>\r\n            <input\r\n             placeholder=\"write todo here\"\r\n             value={mytodo}\r\n             onChange={(e)=>setTodo(e.target.value)}\r\n            />\r\n            <button className=\"btn #ff4081 pink accent-2\" onClick={()=>addTodo() }>Add todo</button>\r\n            <ul className=\"collection\">\r\n                {\r\n                    todos.map(item=>{\r\n                        return  <li className=\"collection-item\" key={item._id}\r\n                        onClick={()=>dispatch(deleteTodo(item._id))}\r\n                        >{item.todo}</li>\r\n                    })\r\n                }\r\n               \r\n               \r\n             </ul>\r\n             <button className=\"btn #ff4081 pink accent-2\" onClick={()=>dispatch(logout()) }>Logout</button>\r\n                        \r\n        </div>\r\n    )\r\n}\r\n","import {useEffect} from 'react';\nimport './App.css';\nimport Auth from './components/Auth'\nimport Todo from './components/Todo';\nimport {addToken} from './reducers/authReducer'\nimport {useSelector,useDispatch} from 'react-redux'\nfunction App() {\n  const token = useSelector((state)=>state.user.token)\n  const dispatch = useDispatch()\n  useEffect(()=>{\n    dispatch(addToken())\n  },[])\n  \n  return (\n    <div className=\"App\">\n    {\n      token ? <Todo /> :<Auth />\n\n    }  \n      \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from '../reducers/authReducer'\nimport todoReducer from '../reducers/todoReducer'\n\nexport const store = configureStore({\n  reducer: {\n   user:authReducer,\n   todos:todoReducer \n  },\n});\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}